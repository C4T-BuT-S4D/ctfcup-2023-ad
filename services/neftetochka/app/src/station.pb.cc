// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: station.proto

#include "station.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PassedRequest::PassedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.station_id_)*/int64_t{0}
  , /*decltype(_impl_.money_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PassedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassedRequestDefaultTypeInternal() {}
  union {
    PassedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassedRequestDefaultTypeInternal _PassedRequest_default_instance_;
PROTOBUF_CONSTEXPR NoMoneyRequest::NoMoneyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.station_id_)*/int64_t{0}
  , /*decltype(_impl_.oil_id_)*/int64_t{0}
  , /*decltype(_impl_.money_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NoMoneyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoMoneyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoMoneyRequestDefaultTypeInternal() {}
  union {
    NoMoneyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoMoneyRequestDefaultTypeInternal _NoMoneyRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOilRequest::GetOilRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.station_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetOilRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOilRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOilRequestDefaultTypeInternal() {}
  union {
    GetOilRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOilRequestDefaultTypeInternal _GetOilRequest_default_instance_;
PROTOBUF_CONSTEXPR InitRequest::InitRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InitRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitRequestDefaultTypeInternal() {}
  union {
    InitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitRequestDefaultTypeInternal _InitRequest_default_instance_;
PROTOBUF_CONSTEXPR LinkRequest::LinkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LinkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkRequestDefaultTypeInternal() {}
  union {
    LinkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkRequestDefaultTypeInternal _LinkRequest_default_instance_;
PROTOBUF_CONSTEXPR SendOilRequest::SendOilRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.route_)*/{}
  , /*decltype(_impl_._route_cached_byte_size_)*/{0}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.receiver_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.money_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendOilRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendOilRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendOilRequestDefaultTypeInternal() {}
  union {
    SendOilRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendOilRequestDefaultTypeInternal _SendOilRequest_default_instance_;
PROTOBUF_CONSTEXPR AddMoneyRequest::AddMoneyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.oil_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddMoneyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddMoneyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddMoneyRequestDefaultTypeInternal() {}
  union {
    AddMoneyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddMoneyRequestDefaultTypeInternal _AddMoneyRequest_default_instance_;
PROTOBUF_CONSTEXPR None::None(
    ::_pbi::ConstantInitialized) {}
struct NoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoneDefaultTypeInternal() {}
  union {
    None _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoneDefaultTypeInternal _None_default_instance_;
static ::_pb::Metadata file_level_metadata_station_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_station_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_station_2eproto = nullptr;

const uint32_t TableStruct_station_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PassedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PassedRequest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::PassedRequest, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::PassedRequest, _impl_.station_id_),
  PROTOBUF_FIELD_OFFSET(::PassedRequest, _impl_.money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NoMoneyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NoMoneyRequest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::NoMoneyRequest, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::NoMoneyRequest, _impl_.station_id_),
  PROTOBUF_FIELD_OFFSET(::NoMoneyRequest, _impl_.oil_id_),
  PROTOBUF_FIELD_OFFSET(::NoMoneyRequest, _impl_.money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetOilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetOilRequest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::GetOilRequest, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::GetOilRequest, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::GetOilRequest, _impl_.station_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::InitRequest, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::InitRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::InitRequest, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LinkRequest, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::LinkRequest, _impl_.cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SendOilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SendOilRequest, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::SendOilRequest, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::SendOilRequest, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::SendOilRequest, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::SendOilRequest, _impl_.route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddMoneyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AddMoneyRequest, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::AddMoneyRequest, _impl_.oil_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::None, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PassedRequest)},
  { 10, -1, -1, sizeof(::NoMoneyRequest)},
  { 21, -1, -1, sizeof(::GetOilRequest)},
  { 31, -1, -1, sizeof(::InitRequest)},
  { 40, -1, -1, sizeof(::LinkRequest)},
  { 48, -1, -1, sizeof(::SendOilRequest)},
  { 59, -1, -1, sizeof(::AddMoneyRequest)},
  { 67, -1, -1, sizeof(::None)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PassedRequest_default_instance_._instance,
  &::_NoMoneyRequest_default_instance_._instance,
  &::_GetOilRequest_default_instance_._instance,
  &::_InitRequest_default_instance_._instance,
  &::_LinkRequest_default_instance_._instance,
  &::_SendOilRequest_default_instance_._instance,
  &::_AddMoneyRequest_default_instance_._instance,
  &::_None_default_instance_._instance,
};

const char descriptor_table_protodef_station_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rstation.proto\"T\n\rPassedRequest\022\013\n\003uid\030"
  "\001 \001(\t\022\023\n\013receiver_id\030\002 \001(\t\022\022\n\nstation_id"
  "\030\003 \001(\003\022\r\n\005money\030\004 \001(\003\"e\n\016NoMoneyRequest\022"
  "\013\n\003uid\030\001 \001(\t\022\023\n\013receiver_id\030\002 \001(\t\022\022\n\nsta"
  "tion_id\030\003 \001(\003\022\016\n\006oil_id\030\004 \001(\003\022\r\n\005money\030\005"
  " \001(\003\"R\n\rGetOilRequest\022\013\n\003uid\030\001 \001(\t\022\013\n\003ms"
  "g\030\002 \001(\t\022\023\n\013receiver_id\030\003 \001(\t\022\022\n\nstation_"
  "id\030\004 \001(\003\"1\n\013InitRequest\022\014\n\004port\030\001 \001(\005\022\t\n"
  "\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\")\n\013LinkRequest\022\014\n\004po"
  "rt\030\001 \001(\005\022\014\n\004cost\030\002 \001(\005\"]\n\016SendOilRequest"
  "\022\013\n\003uid\030\001 \001(\t\022\023\n\013receiver_id\030\002 \001(\t\022\013\n\003ms"
  "g\030\003 \001(\t\022\r\n\005money\030\004 \001(\003\022\r\n\005route\030\005 \003(\005\"1\n"
  "\017AddMoneyRequest\022\016\n\006amount\030\002 \001(\005\022\016\n\006oil_"
  "id\030\003 \001(\005\"\006\n\004None*_\n\006Status\022\026\n\022STATUS_UNS"
  "PECIFIED\020\000\022\006\n\002OK\020\001\022\014\n\010NO_MONEY\020\002\022\010\n\004PASS"
  "\020\003\022\t\n\005READY\020\004\022\022\n\016INVALID_OIL_ID\020\0052x\n\013Mai"
  "nStation\022!\n\006Passed\022\016.PassedRequest\032\005.Non"
  "e\"\000\022#\n\007NoMoney\022\017.NoMoneyRequest\032\005.None\"\000"
  "\022!\n\006GetOil\022\016.GetOilRequest\032\005.None\"\0002\223\001\n\007"
  "Station\022\035\n\004Init\022\014.InitRequest\032\005.None\"\000\022\035"
  "\n\004Link\022\014.LinkRequest\032\005.None\"\000\022#\n\007SendOil"
  "\022\017.SendOilRequest\032\005.None\"\000\022%\n\010AddMoney\022\020"
  ".AddMoneyRequest\032\005.None\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_station_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_station_2eproto = {
    false, false, 913, descriptor_table_protodef_station_2eproto,
    "station.proto",
    &descriptor_table_station_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_station_2eproto::offsets,
    file_level_metadata_station_2eproto, file_level_enum_descriptors_station_2eproto,
    file_level_service_descriptors_station_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_station_2eproto_getter() {
  return &descriptor_table_station_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_station_2eproto(&descriptor_table_station_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_station_2eproto);
  return file_level_enum_descriptors_station_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PassedRequest::_Internal {
 public:
};

PassedRequest::PassedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PassedRequest)
}
PassedRequest::PassedRequest(const PassedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PassedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.station_id_){}
    , decltype(_impl_.money_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    _this->_impl_.receiver_id_.Set(from._internal_receiver_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.station_id_, &from._impl_.station_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.money_) -
    reinterpret_cast<char*>(&_impl_.station_id_)) + sizeof(_impl_.money_));
  // @@protoc_insertion_point(copy_constructor:PassedRequest)
}

inline void PassedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.station_id_){int64_t{0}}
    , decltype(_impl_.money_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PassedRequest::~PassedRequest() {
  // @@protoc_insertion_point(destructor:PassedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PassedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.receiver_id_.Destroy();
}

void PassedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PassedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PassedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.receiver_id_.ClearToEmpty();
  ::memset(&_impl_.station_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.money_) -
      reinterpret_cast<char*>(&_impl_.station_id_)) + sizeof(_impl_.money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PassedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PassedRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      // string receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PassedRequest.receiver_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 station_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.station_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PassedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PassedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PassedRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PassedRequest.receiver_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  // int64 station_id = 3;
  if (this->_internal_station_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_station_id(), target);
  }

  // int64 money = 4;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PassedRequest)
  return target;
}

size_t PassedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PassedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  // int64 station_id = 3;
  if (this->_internal_station_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_station_id());
  }

  // int64 money = 4;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PassedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PassedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PassedRequest::GetClassData() const { return &_class_data_; }


void PassedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PassedRequest*>(&to_msg);
  auto& from = static_cast<const PassedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PassedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_receiver_id().empty()) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_station_id() != 0) {
    _this->_internal_set_station_id(from._internal_station_id());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PassedRequest::CopyFrom(const PassedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PassedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassedRequest::IsInitialized() const {
  return true;
}

void PassedRequest::InternalSwap(PassedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiver_id_, lhs_arena,
      &other->_impl_.receiver_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PassedRequest, _impl_.money_)
      + sizeof(PassedRequest::_impl_.money_)
      - PROTOBUF_FIELD_OFFSET(PassedRequest, _impl_.station_id_)>(
          reinterpret_cast<char*>(&_impl_.station_id_),
          reinterpret_cast<char*>(&other->_impl_.station_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PassedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[0]);
}

// ===================================================================

class NoMoneyRequest::_Internal {
 public:
};

NoMoneyRequest::NoMoneyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:NoMoneyRequest)
}
NoMoneyRequest::NoMoneyRequest(const NoMoneyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NoMoneyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.station_id_){}
    , decltype(_impl_.oil_id_){}
    , decltype(_impl_.money_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    _this->_impl_.receiver_id_.Set(from._internal_receiver_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.station_id_, &from._impl_.station_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.money_) -
    reinterpret_cast<char*>(&_impl_.station_id_)) + sizeof(_impl_.money_));
  // @@protoc_insertion_point(copy_constructor:NoMoneyRequest)
}

inline void NoMoneyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.station_id_){int64_t{0}}
    , decltype(_impl_.oil_id_){int64_t{0}}
    , decltype(_impl_.money_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NoMoneyRequest::~NoMoneyRequest() {
  // @@protoc_insertion_point(destructor:NoMoneyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NoMoneyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.receiver_id_.Destroy();
}

void NoMoneyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NoMoneyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NoMoneyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.receiver_id_.ClearToEmpty();
  ::memset(&_impl_.station_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.money_) -
      reinterpret_cast<char*>(&_impl_.station_id_)) + sizeof(_impl_.money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoMoneyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NoMoneyRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      // string receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "NoMoneyRequest.receiver_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 station_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.station_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 oil_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.oil_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 money = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NoMoneyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NoMoneyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NoMoneyRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NoMoneyRequest.receiver_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  // int64 station_id = 3;
  if (this->_internal_station_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_station_id(), target);
  }

  // int64 oil_id = 4;
  if (this->_internal_oil_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_oil_id(), target);
  }

  // int64 money = 5;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NoMoneyRequest)
  return target;
}

size_t NoMoneyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NoMoneyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  // int64 station_id = 3;
  if (this->_internal_station_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_station_id());
  }

  // int64 oil_id = 4;
  if (this->_internal_oil_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_oil_id());
  }

  // int64 money = 5;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoMoneyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NoMoneyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoMoneyRequest::GetClassData() const { return &_class_data_; }


void NoMoneyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NoMoneyRequest*>(&to_msg);
  auto& from = static_cast<const NoMoneyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:NoMoneyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_receiver_id().empty()) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_station_id() != 0) {
    _this->_internal_set_station_id(from._internal_station_id());
  }
  if (from._internal_oil_id() != 0) {
    _this->_internal_set_oil_id(from._internal_oil_id());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NoMoneyRequest::CopyFrom(const NoMoneyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NoMoneyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoMoneyRequest::IsInitialized() const {
  return true;
}

void NoMoneyRequest::InternalSwap(NoMoneyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiver_id_, lhs_arena,
      &other->_impl_.receiver_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoMoneyRequest, _impl_.money_)
      + sizeof(NoMoneyRequest::_impl_.money_)
      - PROTOBUF_FIELD_OFFSET(NoMoneyRequest, _impl_.station_id_)>(
          reinterpret_cast<char*>(&_impl_.station_id_),
          reinterpret_cast<char*>(&other->_impl_.station_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoMoneyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[1]);
}

// ===================================================================

class GetOilRequest::_Internal {
 public:
};

GetOilRequest::GetOilRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetOilRequest)
}
GetOilRequest::GetOilRequest(const GetOilRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetOilRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.station_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    _this->_impl_.receiver_id_.Set(from._internal_receiver_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.station_id_ = from._impl_.station_id_;
  // @@protoc_insertion_point(copy_constructor:GetOilRequest)
}

inline void GetOilRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.station_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOilRequest::~GetOilRequest() {
  // @@protoc_insertion_point(destructor:GetOilRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOilRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.msg_.Destroy();
  _impl_.receiver_id_.Destroy();
}

void GetOilRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetOilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetOilRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.receiver_id_.ClearToEmpty();
  _impl_.station_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOilRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetOilRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetOilRequest.msg"));
        } else
          goto handle_unusual;
        continue;
      // string receiver_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetOilRequest.receiver_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 station_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.station_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOilRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetOilRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetOilRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetOilRequest.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string receiver_id = 3;
  if (!this->_internal_receiver_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetOilRequest.receiver_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_receiver_id(), target);
  }

  // int64 station_id = 4;
  if (this->_internal_station_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_station_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetOilRequest)
  return target;
}

size_t GetOilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetOilRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string receiver_id = 3;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  // int64 station_id = 4;
  if (this->_internal_station_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_station_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOilRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetOilRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOilRequest::GetClassData() const { return &_class_data_; }


void GetOilRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetOilRequest*>(&to_msg);
  auto& from = static_cast<const GetOilRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetOilRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_receiver_id().empty()) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_station_id() != 0) {
    _this->_internal_set_station_id(from._internal_station_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOilRequest::CopyFrom(const GetOilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetOilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOilRequest::IsInitialized() const {
  return true;
}

void GetOilRequest::InternalSwap(GetOilRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiver_id_, lhs_arena,
      &other->_impl_.receiver_id_, rhs_arena
  );
  swap(_impl_.station_id_, other->_impl_.station_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOilRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[2]);
}

// ===================================================================

class InitRequest::_Internal {
 public:
};

InitRequest::InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InitRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:InitRequest)
}

inline void InitRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:InitRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InitRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitRequest::GetClassData() const { return &_class_data_; }


void InitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InitRequest*>(&to_msg);
  auto& from = static_cast<const InitRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InitRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  return true;
}

void InitRequest::InternalSwap(InitRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitRequest, _impl_.y_)
      + sizeof(InitRequest::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(InitRequest, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[3]);
}

// ===================================================================

class LinkRequest::_Internal {
 public:
};

LinkRequest::LinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LinkRequest)
}
LinkRequest::LinkRequest(const LinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinkRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.cost_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cost_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.cost_));
  // @@protoc_insertion_point(copy_constructor:LinkRequest)
}

inline void LinkRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0}
    , decltype(_impl_.cost_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LinkRequest::~LinkRequest() {
  // @@protoc_insertion_point(destructor:LinkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LinkRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cost_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.cost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinkRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_port(), target);
  }

  // int32 cost = 2;
  if (this->_internal_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinkRequest)
  return target;
}

size_t LinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinkRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_port());
  }

  // int32 cost = 2;
  if (this->_internal_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinkRequest::GetClassData() const { return &_class_data_; }


void LinkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinkRequest*>(&to_msg);
  auto& from = static_cast<const LinkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LinkRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_cost() != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinkRequest::CopyFrom(const LinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkRequest::IsInitialized() const {
  return true;
}

void LinkRequest::InternalSwap(LinkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinkRequest, _impl_.cost_)
      + sizeof(LinkRequest::_impl_.cost_)
      - PROTOBUF_FIELD_OFFSET(LinkRequest, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[4]);
}

// ===================================================================

class SendOilRequest::_Internal {
 public:
};

SendOilRequest::SendOilRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SendOilRequest)
}
SendOilRequest::SendOilRequest(const SendOilRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendOilRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.route_){from._impl_.route_}
    , /*decltype(_impl_._route_cached_byte_size_)*/{0}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.money_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver_id().empty()) {
    _this->_impl_.receiver_id_.Set(from._internal_receiver_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.money_ = from._impl_.money_;
  // @@protoc_insertion_point(copy_constructor:SendOilRequest)
}

inline void SendOilRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.route_){arena}
    , /*decltype(_impl_._route_cached_byte_size_)*/{0}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.money_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendOilRequest::~SendOilRequest() {
  // @@protoc_insertion_point(destructor:SendOilRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendOilRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.route_.~RepeatedField();
  _impl_.uid_.Destroy();
  _impl_.receiver_id_.Destroy();
  _impl_.msg_.Destroy();
}

void SendOilRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendOilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SendOilRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.route_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.receiver_id_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.money_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendOilRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SendOilRequest.uid"));
        } else
          goto handle_unusual;
        continue;
      // string receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SendOilRequest.receiver_id"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SendOilRequest.msg"));
        } else
          goto handle_unusual;
        continue;
      // int64 money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 route = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_route(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_route(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendOilRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SendOilRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendOilRequest.uid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver_id().data(), static_cast<int>(this->_internal_receiver_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendOilRequest.receiver_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_receiver_id(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendOilRequest.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int64 money = 4;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_money(), target);
  }

  // repeated int32 route = 5;
  {
    int byte_size = _impl_._route_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_route(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendOilRequest)
  return target;
}

size_t SendOilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SendOilRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 route = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.route_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._route_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string uid = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string receiver_id = 2;
  if (!this->_internal_receiver_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver_id());
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int64 money = 4;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendOilRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendOilRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendOilRequest::GetClassData() const { return &_class_data_; }


void SendOilRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendOilRequest*>(&to_msg);
  auto& from = static_cast<const SendOilRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SendOilRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.route_.MergeFrom(from._impl_.route_);
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_receiver_id().empty()) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendOilRequest::CopyFrom(const SendOilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SendOilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOilRequest::IsInitialized() const {
  return true;
}

void SendOilRequest::InternalSwap(SendOilRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.route_.InternalSwap(&other->_impl_.route_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.receiver_id_, lhs_arena,
      &other->_impl_.receiver_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.money_, other->_impl_.money_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOilRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[5]);
}

// ===================================================================

class AddMoneyRequest::_Internal {
 public:
};

AddMoneyRequest::AddMoneyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:AddMoneyRequest)
}
AddMoneyRequest::AddMoneyRequest(const AddMoneyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddMoneyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){}
    , decltype(_impl_.oil_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.oil_id_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.oil_id_));
  // @@protoc_insertion_point(copy_constructor:AddMoneyRequest)
}

inline void AddMoneyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){0}
    , decltype(_impl_.oil_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddMoneyRequest::~AddMoneyRequest() {
  // @@protoc_insertion_point(destructor:AddMoneyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddMoneyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddMoneyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddMoneyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AddMoneyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.oil_id_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.oil_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddMoneyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 oil_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.oil_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddMoneyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddMoneyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_amount(), target);
  }

  // int32 oil_id = 3;
  if (this->_internal_oil_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_oil_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddMoneyRequest)
  return target;
}

size_t AddMoneyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddMoneyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 amount = 2;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_amount());
  }

  // int32 oil_id = 3;
  if (this->_internal_oil_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_oil_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddMoneyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddMoneyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddMoneyRequest::GetClassData() const { return &_class_data_; }


void AddMoneyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddMoneyRequest*>(&to_msg);
  auto& from = static_cast<const AddMoneyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:AddMoneyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_oil_id() != 0) {
    _this->_internal_set_oil_id(from._internal_oil_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddMoneyRequest::CopyFrom(const AddMoneyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddMoneyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMoneyRequest::IsInitialized() const {
  return true;
}

void AddMoneyRequest::InternalSwap(AddMoneyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddMoneyRequest, _impl_.oil_id_)
      + sizeof(AddMoneyRequest::_impl_.oil_id_)
      - PROTOBUF_FIELD_OFFSET(AddMoneyRequest, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddMoneyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[6]);
}

// ===================================================================

class None::_Internal {
 public:
};

None::None(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:None)
}
None::None(const None& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  None* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:None)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData None::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*None::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata None::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_station_2eproto_getter, &descriptor_table_station_2eproto_once,
      file_level_metadata_station_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PassedRequest*
Arena::CreateMaybeMessage< ::PassedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PassedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::NoMoneyRequest*
Arena::CreateMaybeMessage< ::NoMoneyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NoMoneyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetOilRequest*
Arena::CreateMaybeMessage< ::GetOilRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetOilRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::InitRequest*
Arena::CreateMaybeMessage< ::InitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::LinkRequest*
Arena::CreateMaybeMessage< ::LinkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SendOilRequest*
Arena::CreateMaybeMessage< ::SendOilRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SendOilRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AddMoneyRequest*
Arena::CreateMaybeMessage< ::AddMoneyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AddMoneyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::None*
Arena::CreateMaybeMessage< ::None >(Arena* arena) {
  return Arena::CreateMessageInternal< ::None >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

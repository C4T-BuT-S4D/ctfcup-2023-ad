// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: bluwal/bluwal.proto

package bluwal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FactorChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N string `protobuf:"bytes,1,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *FactorChallenge) Reset() {
	*x = FactorChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactorChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactorChallenge) ProtoMessage() {}

func (x *FactorChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactorChallenge.ProtoReflect.Descriptor instead.
func (*FactorChallenge) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{0}
}

func (x *FactorChallenge) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

type FactorChallengeSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Factors []string `protobuf:"bytes,1,rep,name=factors,proto3" json:"factors,omitempty"`
}

func (x *FactorChallengeSubmission) Reset() {
	*x = FactorChallengeSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactorChallengeSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactorChallengeSubmission) ProtoMessage() {}

func (x *FactorChallengeSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactorChallengeSubmission.ProtoReflect.Descriptor instead.
func (*FactorChallengeSubmission) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{1}
}

func (x *FactorChallengeSubmission) GetFactors() []string {
	if x != nil {
		return x.Factors
	}
	return nil
}

type Challenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Challenge:
	//
	//	*Challenge_FactorChallenge
	Challenge      isChallenge_Challenge `protobuf_oneof:"challenge"`
	Characteristic int32                 `protobuf:"varint,2,opt,name=characteristic,proto3" json:"characteristic,omitempty"`
	Delta          int32                 `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{2}
}

func (m *Challenge) GetChallenge() isChallenge_Challenge {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (x *Challenge) GetFactorChallenge() *FactorChallenge {
	if x, ok := x.GetChallenge().(*Challenge_FactorChallenge); ok {
		return x.FactorChallenge
	}
	return nil
}

func (x *Challenge) GetCharacteristic() int32 {
	if x != nil {
		return x.Characteristic
	}
	return 0
}

func (x *Challenge) GetDelta() int32 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type isChallenge_Challenge interface {
	isChallenge_Challenge()
}

type Challenge_FactorChallenge struct {
	FactorChallenge *FactorChallenge `protobuf:"bytes,1,opt,name=factor_challenge,json=factorChallenge,proto3,oneof"`
}

func (*Challenge_FactorChallenge) isChallenge_Challenge() {}

type Contest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Author     string       `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Goal       []int32      `protobuf:"varint,3,rep,packed,name=goal,proto3" json:"goal,omitempty"`
	Threshold  []int32      `protobuf:"varint,4,rep,packed,name=threshold,proto3" json:"threshold,omitempty"`
	Challenges []*Challenge `protobuf:"bytes,5,rep,name=challenges,proto3" json:"challenges,omitempty"`
	Reward     string       `protobuf:"bytes,6,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *Contest) Reset() {
	*x = Contest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contest) ProtoMessage() {}

func (x *Contest) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contest.ProtoReflect.Descriptor instead.
func (*Contest) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{3}
}

func (x *Contest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Contest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Contest) GetGoal() []int32 {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *Contest) GetThreshold() []int32 {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *Contest) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *Contest) GetReward() string {
	if x != nil {
		return x.Reward
	}
	return ""
}

type ContestCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contest *Contest `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
}

func (x *ContestCreateRequest) Reset() {
	*x = ContestCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestCreateRequest) ProtoMessage() {}

func (x *ContestCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestCreateRequest.ProtoReflect.Descriptor instead.
func (*ContestCreateRequest) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{4}
}

func (x *ContestCreateRequest) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type ContestCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contest *Contest `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
}

func (x *ContestCreateResponse) Reset() {
	*x = ContestCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestCreateResponse) ProtoMessage() {}

func (x *ContestCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestCreateResponse.ProtoReflect.Descriptor instead.
func (*ContestCreateResponse) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{5}
}

func (x *ContestCreateResponse) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type ContestGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Author string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
}

func (x *ContestGetRequest) Reset() {
	*x = ContestGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestGetRequest) ProtoMessage() {}

func (x *ContestGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestGetRequest.ProtoReflect.Descriptor instead.
func (*ContestGetRequest) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{6}
}

func (x *ContestGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContestGetRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

type ContestGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contest *Contest `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
}

func (x *ContestGetResponse) Reset() {
	*x = ContestGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestGetResponse) ProtoMessage() {}

func (x *ContestGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestGetResponse.ProtoReflect.Descriptor instead.
func (*ContestGetResponse) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{7}
}

func (x *ContestGetResponse) GetContest() *Contest {
	if x != nil {
		return x.Contest
	}
	return nil
}

type ContestEnrollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId string  `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	Initial   []int32 `protobuf:"varint,2,rep,packed,name=initial,proto3" json:"initial,omitempty"`
}

func (x *ContestEnrollRequest) Reset() {
	*x = ContestEnrollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestEnrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestEnrollRequest) ProtoMessage() {}

func (x *ContestEnrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestEnrollRequest.ProtoReflect.Descriptor instead.
func (*ContestEnrollRequest) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{8}
}

func (x *ContestEnrollRequest) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ContestEnrollRequest) GetInitial() []int32 {
	if x != nil {
		return x.Initial
	}
	return nil
}

type ContestEnrollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnrollmentId string `protobuf:"bytes,1,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
}

func (x *ContestEnrollResponse) Reset() {
	*x = ContestEnrollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContestEnrollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContestEnrollResponse) ProtoMessage() {}

func (x *ContestEnrollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContestEnrollResponse.ProtoReflect.Descriptor instead.
func (*ContestEnrollResponse) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{9}
}

func (x *ContestEnrollResponse) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

type ChallengeSubmitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId    string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	EnrollmentId string `protobuf:"bytes,2,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
	// Types that are assignable to Submission:
	//
	//	*ChallengeSubmitRequest_FactorChallengeSubmission
	Submission isChallengeSubmitRequest_Submission `protobuf_oneof:"submission"`
}

func (x *ChallengeSubmitRequest) Reset() {
	*x = ChallengeSubmitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSubmitRequest) ProtoMessage() {}

func (x *ChallengeSubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSubmitRequest.ProtoReflect.Descriptor instead.
func (*ChallengeSubmitRequest) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{10}
}

func (x *ChallengeSubmitRequest) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ChallengeSubmitRequest) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

func (m *ChallengeSubmitRequest) GetSubmission() isChallengeSubmitRequest_Submission {
	if m != nil {
		return m.Submission
	}
	return nil
}

func (x *ChallengeSubmitRequest) GetFactorChallengeSubmission() *FactorChallengeSubmission {
	if x, ok := x.GetSubmission().(*ChallengeSubmitRequest_FactorChallengeSubmission); ok {
		return x.FactorChallengeSubmission
	}
	return nil
}

type isChallengeSubmitRequest_Submission interface {
	isChallengeSubmitRequest_Submission()
}

type ChallengeSubmitRequest_FactorChallengeSubmission struct {
	FactorChallengeSubmission *FactorChallengeSubmission `protobuf:"bytes,3,opt,name=factor_challenge_submission,json=factorChallengeSubmission,proto3,oneof"`
}

func (*ChallengeSubmitRequest_FactorChallengeSubmission) isChallengeSubmitRequest_Submission() {}

type ChallengeSubmitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentChallenge int32   `protobuf:"varint,1,opt,name=current_challenge,json=currentChallenge,proto3" json:"current_challenge,omitempty"`
	CurrentState     []int32 `protobuf:"varint,2,rep,packed,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
}

func (x *ChallengeSubmitResponse) Reset() {
	*x = ChallengeSubmitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeSubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeSubmitResponse) ProtoMessage() {}

func (x *ChallengeSubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeSubmitResponse.ProtoReflect.Descriptor instead.
func (*ChallengeSubmitResponse) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{11}
}

func (x *ChallengeSubmitResponse) GetCurrentChallenge() int32 {
	if x != nil {
		return x.CurrentChallenge
	}
	return 0
}

func (x *ChallengeSubmitResponse) GetCurrentState() []int32 {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

type CheckGoalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId    string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	EnrollmentId string `protobuf:"bytes,2,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
}

func (x *CheckGoalRequest) Reset() {
	*x = CheckGoalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGoalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGoalRequest) ProtoMessage() {}

func (x *CheckGoalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGoalRequest.ProtoReflect.Descriptor instead.
func (*CheckGoalRequest) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{12}
}

func (x *CheckGoalRequest) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *CheckGoalRequest) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

type CheckGoalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentChallenge int32   `protobuf:"varint,1,opt,name=current_challenge,json=currentChallenge,proto3" json:"current_challenge,omitempty"`
	CurrentState     []int32 `protobuf:"varint,2,rep,packed,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
}

func (x *CheckGoalResponse) Reset() {
	*x = CheckGoalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGoalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGoalResponse) ProtoMessage() {}

func (x *CheckGoalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGoalResponse.ProtoReflect.Descriptor instead.
func (*CheckGoalResponse) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{13}
}

func (x *CheckGoalResponse) GetCurrentChallenge() int32 {
	if x != nil {
		return x.CurrentChallenge
	}
	return 0
}

func (x *CheckGoalResponse) GetCurrentState() []int32 {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

type ClaimRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContestId    string `protobuf:"bytes,1,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	EnrollmentId string `protobuf:"bytes,2,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
}

func (x *ClaimRewardRequest) Reset() {
	*x = ClaimRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimRewardRequest) ProtoMessage() {}

func (x *ClaimRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimRewardRequest.ProtoReflect.Descriptor instead.
func (*ClaimRewardRequest) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{14}
}

func (x *ClaimRewardRequest) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *ClaimRewardRequest) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

type ClaimRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward string `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *ClaimRewardResponse) Reset() {
	*x = ClaimRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluwal_bluwal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimRewardResponse) ProtoMessage() {}

func (x *ClaimRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluwal_bluwal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimRewardResponse.ProtoReflect.Descriptor instead.
func (*ClaimRewardResponse) Descriptor() ([]byte, []int) {
	return file_bluwal_bluwal_proto_rawDescGZIP(), []int{15}
}

func (x *ClaimRewardResponse) GetReward() string {
	if x != nil {
		return x.Reward
	}
	return ""
}

var File_bluwal_bluwal_proto protoreflect.FileDescriptor

var file_bluwal_bluwal_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2f, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x22, 0x1f, 0x0a,
	0x0f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6e, 0x22, 0x35,
	0x0a, 0x19, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x41, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x3f, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x3c, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x1b, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x19, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x17, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x2d, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x6a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x42, 0x0b,
	0x42, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x17, 0x62,
	0x6c, 0x75, 0x77, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x62, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0xa2, 0x02, 0x03, 0x42, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x42,
	0x6c, 0x75, 0x77, 0x61, 0x6c, 0xca, 0x02, 0x06, 0x42, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0xe2, 0x02,
	0x12, 0x42, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x06, 0x42, 0x6c, 0x75, 0x77, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bluwal_bluwal_proto_rawDescOnce sync.Once
	file_bluwal_bluwal_proto_rawDescData = file_bluwal_bluwal_proto_rawDesc
)

func file_bluwal_bluwal_proto_rawDescGZIP() []byte {
	file_bluwal_bluwal_proto_rawDescOnce.Do(func() {
		file_bluwal_bluwal_proto_rawDescData = protoimpl.X.CompressGZIP(file_bluwal_bluwal_proto_rawDescData)
	})
	return file_bluwal_bluwal_proto_rawDescData
}

var file_bluwal_bluwal_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_bluwal_bluwal_proto_goTypes = []interface{}{
	(*FactorChallenge)(nil),           // 0: bluwal.FactorChallenge
	(*FactorChallengeSubmission)(nil), // 1: bluwal.FactorChallengeSubmission
	(*Challenge)(nil),                 // 2: bluwal.Challenge
	(*Contest)(nil),                   // 3: bluwal.Contest
	(*ContestCreateRequest)(nil),      // 4: bluwal.ContestCreateRequest
	(*ContestCreateResponse)(nil),     // 5: bluwal.ContestCreateResponse
	(*ContestGetRequest)(nil),         // 6: bluwal.ContestGetRequest
	(*ContestGetResponse)(nil),        // 7: bluwal.ContestGetResponse
	(*ContestEnrollRequest)(nil),      // 8: bluwal.ContestEnrollRequest
	(*ContestEnrollResponse)(nil),     // 9: bluwal.ContestEnrollResponse
	(*ChallengeSubmitRequest)(nil),    // 10: bluwal.ChallengeSubmitRequest
	(*ChallengeSubmitResponse)(nil),   // 11: bluwal.ChallengeSubmitResponse
	(*CheckGoalRequest)(nil),          // 12: bluwal.CheckGoalRequest
	(*CheckGoalResponse)(nil),         // 13: bluwal.CheckGoalResponse
	(*ClaimRewardRequest)(nil),        // 14: bluwal.ClaimRewardRequest
	(*ClaimRewardResponse)(nil),       // 15: bluwal.ClaimRewardResponse
}
var file_bluwal_bluwal_proto_depIdxs = []int32{
	0, // 0: bluwal.Challenge.factor_challenge:type_name -> bluwal.FactorChallenge
	2, // 1: bluwal.Contest.challenges:type_name -> bluwal.Challenge
	3, // 2: bluwal.ContestCreateRequest.contest:type_name -> bluwal.Contest
	3, // 3: bluwal.ContestCreateResponse.contest:type_name -> bluwal.Contest
	3, // 4: bluwal.ContestGetResponse.contest:type_name -> bluwal.Contest
	1, // 5: bluwal.ChallengeSubmitRequest.factor_challenge_submission:type_name -> bluwal.FactorChallengeSubmission
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_bluwal_bluwal_proto_init() }
func file_bluwal_bluwal_proto_init() {
	if File_bluwal_bluwal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bluwal_bluwal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactorChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactorChallengeSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Challenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestEnrollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContestEnrollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeSubmitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeSubmitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGoalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGoalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bluwal_bluwal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bluwal_bluwal_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Challenge_FactorChallenge)(nil),
	}
	file_bluwal_bluwal_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ChallengeSubmitRequest_FactorChallengeSubmission)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bluwal_bluwal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bluwal_bluwal_proto_goTypes,
		DependencyIndexes: file_bluwal_bluwal_proto_depIdxs,
		MessageInfos:      file_bluwal_bluwal_proto_msgTypes,
	}.Build()
	File_bluwal_bluwal_proto = out.File
	file_bluwal_bluwal_proto_rawDesc = nil
	file_bluwal_bluwal_proto_goTypes = nil
	file_bluwal_bluwal_proto_depIdxs = nil
}

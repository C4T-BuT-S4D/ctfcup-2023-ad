// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bluwal/bluwal_service.proto

package bluwal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BluwalService_ContestCreate_FullMethodName   = "/bluwal.BluwalService/ContestCreate"
	BluwalService_ContestGet_FullMethodName      = "/bluwal.BluwalService/ContestGet"
	BluwalService_ContestList_FullMethodName     = "/bluwal.BluwalService/ContestList"
	BluwalService_ContestEnroll_FullMethodName   = "/bluwal.BluwalService/ContestEnroll"
	BluwalService_ChallengeSubmit_FullMethodName = "/bluwal.BluwalService/ChallengeSubmit"
	BluwalService_CheckGoal_FullMethodName       = "/bluwal.BluwalService/CheckGoal"
	BluwalService_ClaimReward_FullMethodName     = "/bluwal.BluwalService/ClaimReward"
)

// BluwalServiceClient is the client API for BluwalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BluwalServiceClient interface {
	ContestCreate(ctx context.Context, in *ContestCreateRequest, opts ...grpc.CallOption) (*ContestCreateResponse, error)
	ContestGet(ctx context.Context, in *ContestGetRequest, opts ...grpc.CallOption) (*ContestGetResponse, error)
	ContestList(ctx context.Context, in *ContestListRequest, opts ...grpc.CallOption) (*ContestListResponse, error)
	ContestEnroll(ctx context.Context, in *ContestEnrollRequest, opts ...grpc.CallOption) (*ContestEnrollResponse, error)
	ChallengeSubmit(ctx context.Context, in *ChallengeSubmitRequest, opts ...grpc.CallOption) (*ChallengeSubmitResponse, error)
	CheckGoal(ctx context.Context, in *CheckGoalRequest, opts ...grpc.CallOption) (*CheckGoalResponse, error)
	ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*ClaimRewardResponse, error)
}

type bluwalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBluwalServiceClient(cc grpc.ClientConnInterface) BluwalServiceClient {
	return &bluwalServiceClient{cc}
}

func (c *bluwalServiceClient) ContestCreate(ctx context.Context, in *ContestCreateRequest, opts ...grpc.CallOption) (*ContestCreateResponse, error) {
	out := new(ContestCreateResponse)
	err := c.cc.Invoke(ctx, BluwalService_ContestCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluwalServiceClient) ContestGet(ctx context.Context, in *ContestGetRequest, opts ...grpc.CallOption) (*ContestGetResponse, error) {
	out := new(ContestGetResponse)
	err := c.cc.Invoke(ctx, BluwalService_ContestGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluwalServiceClient) ContestList(ctx context.Context, in *ContestListRequest, opts ...grpc.CallOption) (*ContestListResponse, error) {
	out := new(ContestListResponse)
	err := c.cc.Invoke(ctx, BluwalService_ContestList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluwalServiceClient) ContestEnroll(ctx context.Context, in *ContestEnrollRequest, opts ...grpc.CallOption) (*ContestEnrollResponse, error) {
	out := new(ContestEnrollResponse)
	err := c.cc.Invoke(ctx, BluwalService_ContestEnroll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluwalServiceClient) ChallengeSubmit(ctx context.Context, in *ChallengeSubmitRequest, opts ...grpc.CallOption) (*ChallengeSubmitResponse, error) {
	out := new(ChallengeSubmitResponse)
	err := c.cc.Invoke(ctx, BluwalService_ChallengeSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluwalServiceClient) CheckGoal(ctx context.Context, in *CheckGoalRequest, opts ...grpc.CallOption) (*CheckGoalResponse, error) {
	out := new(CheckGoalResponse)
	err := c.cc.Invoke(ctx, BluwalService_CheckGoal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluwalServiceClient) ClaimReward(ctx context.Context, in *ClaimRewardRequest, opts ...grpc.CallOption) (*ClaimRewardResponse, error) {
	out := new(ClaimRewardResponse)
	err := c.cc.Invoke(ctx, BluwalService_ClaimReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluwalServiceServer is the server API for BluwalService service.
// All implementations must embed UnimplementedBluwalServiceServer
// for forward compatibility
type BluwalServiceServer interface {
	ContestCreate(context.Context, *ContestCreateRequest) (*ContestCreateResponse, error)
	ContestGet(context.Context, *ContestGetRequest) (*ContestGetResponse, error)
	ContestList(context.Context, *ContestListRequest) (*ContestListResponse, error)
	ContestEnroll(context.Context, *ContestEnrollRequest) (*ContestEnrollResponse, error)
	ChallengeSubmit(context.Context, *ChallengeSubmitRequest) (*ChallengeSubmitResponse, error)
	CheckGoal(context.Context, *CheckGoalRequest) (*CheckGoalResponse, error)
	ClaimReward(context.Context, *ClaimRewardRequest) (*ClaimRewardResponse, error)
	mustEmbedUnimplementedBluwalServiceServer()
}

// UnimplementedBluwalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBluwalServiceServer struct {
}

func (UnimplementedBluwalServiceServer) ContestCreate(context.Context, *ContestCreateRequest) (*ContestCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContestCreate not implemented")
}
func (UnimplementedBluwalServiceServer) ContestGet(context.Context, *ContestGetRequest) (*ContestGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContestGet not implemented")
}
func (UnimplementedBluwalServiceServer) ContestList(context.Context, *ContestListRequest) (*ContestListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContestList not implemented")
}
func (UnimplementedBluwalServiceServer) ContestEnroll(context.Context, *ContestEnrollRequest) (*ContestEnrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContestEnroll not implemented")
}
func (UnimplementedBluwalServiceServer) ChallengeSubmit(context.Context, *ChallengeSubmitRequest) (*ChallengeSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeSubmit not implemented")
}
func (UnimplementedBluwalServiceServer) CheckGoal(context.Context, *CheckGoalRequest) (*CheckGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGoal not implemented")
}
func (UnimplementedBluwalServiceServer) ClaimReward(context.Context, *ClaimRewardRequest) (*ClaimRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimReward not implemented")
}
func (UnimplementedBluwalServiceServer) mustEmbedUnimplementedBluwalServiceServer() {}

// UnsafeBluwalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BluwalServiceServer will
// result in compilation errors.
type UnsafeBluwalServiceServer interface {
	mustEmbedUnimplementedBluwalServiceServer()
}

func RegisterBluwalServiceServer(s grpc.ServiceRegistrar, srv BluwalServiceServer) {
	s.RegisterService(&BluwalService_ServiceDesc, srv)
}

func _BluwalService_ContestCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContestCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluwalServiceServer).ContestCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluwalService_ContestCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluwalServiceServer).ContestCreate(ctx, req.(*ContestCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluwalService_ContestGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContestGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluwalServiceServer).ContestGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluwalService_ContestGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluwalServiceServer).ContestGet(ctx, req.(*ContestGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluwalService_ContestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContestListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluwalServiceServer).ContestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluwalService_ContestList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluwalServiceServer).ContestList(ctx, req.(*ContestListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluwalService_ContestEnroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContestEnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluwalServiceServer).ContestEnroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluwalService_ContestEnroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluwalServiceServer).ContestEnroll(ctx, req.(*ContestEnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluwalService_ChallengeSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluwalServiceServer).ChallengeSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluwalService_ChallengeSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluwalServiceServer).ChallengeSubmit(ctx, req.(*ChallengeSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluwalService_CheckGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluwalServiceServer).CheckGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluwalService_CheckGoal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluwalServiceServer).CheckGoal(ctx, req.(*CheckGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluwalService_ClaimReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluwalServiceServer).ClaimReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluwalService_ClaimReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluwalServiceServer).ClaimReward(ctx, req.(*ClaimRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BluwalService_ServiceDesc is the grpc.ServiceDesc for BluwalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BluwalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bluwal.BluwalService",
	HandlerType: (*BluwalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContestCreate",
			Handler:    _BluwalService_ContestCreate_Handler,
		},
		{
			MethodName: "ContestGet",
			Handler:    _BluwalService_ContestGet_Handler,
		},
		{
			MethodName: "ContestList",
			Handler:    _BluwalService_ContestList_Handler,
		},
		{
			MethodName: "ContestEnroll",
			Handler:    _BluwalService_ContestEnroll_Handler,
		},
		{
			MethodName: "ChallengeSubmit",
			Handler:    _BluwalService_ChallengeSubmit_Handler,
		},
		{
			MethodName: "CheckGoal",
			Handler:    _BluwalService_CheckGoal_Handler,
		},
		{
			MethodName: "ClaimReward",
			Handler:    _BluwalService_ClaimReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bluwal/bluwal_service.proto",
}

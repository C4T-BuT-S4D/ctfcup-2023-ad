// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: station.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_station_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_station_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_station_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_station_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_station_2eproto;
class AddMoneyRequest;
struct AddMoneyRequestDefaultTypeInternal;
extern AddMoneyRequestDefaultTypeInternal _AddMoneyRequest_default_instance_;
class GetOilRequest;
struct GetOilRequestDefaultTypeInternal;
extern GetOilRequestDefaultTypeInternal _GetOilRequest_default_instance_;
class InitRequest;
struct InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class LinkRequest;
struct LinkRequestDefaultTypeInternal;
extern LinkRequestDefaultTypeInternal _LinkRequest_default_instance_;
class NoMoneyRequest;
struct NoMoneyRequestDefaultTypeInternal;
extern NoMoneyRequestDefaultTypeInternal _NoMoneyRequest_default_instance_;
class None;
struct NoneDefaultTypeInternal;
extern NoneDefaultTypeInternal _None_default_instance_;
class PassedRequest;
struct PassedRequestDefaultTypeInternal;
extern PassedRequestDefaultTypeInternal _PassedRequest_default_instance_;
class SendOilRequest;
struct SendOilRequestDefaultTypeInternal;
extern SendOilRequestDefaultTypeInternal _SendOilRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddMoneyRequest* Arena::CreateMaybeMessage<::AddMoneyRequest>(Arena*);
template<> ::GetOilRequest* Arena::CreateMaybeMessage<::GetOilRequest>(Arena*);
template<> ::InitRequest* Arena::CreateMaybeMessage<::InitRequest>(Arena*);
template<> ::LinkRequest* Arena::CreateMaybeMessage<::LinkRequest>(Arena*);
template<> ::NoMoneyRequest* Arena::CreateMaybeMessage<::NoMoneyRequest>(Arena*);
template<> ::None* Arena::CreateMaybeMessage<::None>(Arena*);
template<> ::PassedRequest* Arena::CreateMaybeMessage<::PassedRequest>(Arena*);
template<> ::SendOilRequest* Arena::CreateMaybeMessage<::SendOilRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Status : int {
  STATUS_UNSPECIFIED = 0,
  OK = 1,
  NO_MONEY = 2,
  PASS = 3,
  READY = 4,
  INVALID_OIL_ID = 5,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = STATUS_UNSPECIFIED;
constexpr Status Status_MAX = INVALID_OIL_ID;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class PassedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PassedRequest) */ {
 public:
  inline PassedRequest() : PassedRequest(nullptr) {}
  ~PassedRequest() override;
  explicit PROTOBUF_CONSTEXPR PassedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PassedRequest(const PassedRequest& from);
  PassedRequest(PassedRequest&& from) noexcept
    : PassedRequest() {
    *this = ::std::move(from);
  }

  inline PassedRequest& operator=(const PassedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PassedRequest& operator=(PassedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PassedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PassedRequest* internal_default_instance() {
    return reinterpret_cast<const PassedRequest*>(
               &_PassedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PassedRequest& a, PassedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PassedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PassedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PassedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PassedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PassedRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PassedRequest& from) {
    PassedRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PassedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PassedRequest";
  }
  protected:
  explicit PassedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kStationIdFieldNumber = 3,
    kMoneyFieldNumber = 4,
  };
  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // int64 station_id = 3;
  void clear_station_id();
  int64_t station_id() const;
  void set_station_id(int64_t value);
  private:
  int64_t _internal_station_id() const;
  void _internal_set_station_id(int64_t value);
  public:

  // int64 money = 4;
  void clear_money();
  int64_t money() const;
  void set_money(int64_t value);
  private:
  int64_t _internal_money() const;
  void _internal_set_money(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PassedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    int64_t station_id_;
    int64_t money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_station_2eproto;
};
// -------------------------------------------------------------------

class NoMoneyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NoMoneyRequest) */ {
 public:
  inline NoMoneyRequest() : NoMoneyRequest(nullptr) {}
  ~NoMoneyRequest() override;
  explicit PROTOBUF_CONSTEXPR NoMoneyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoMoneyRequest(const NoMoneyRequest& from);
  NoMoneyRequest(NoMoneyRequest&& from) noexcept
    : NoMoneyRequest() {
    *this = ::std::move(from);
  }

  inline NoMoneyRequest& operator=(const NoMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoMoneyRequest& operator=(NoMoneyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoMoneyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoMoneyRequest* internal_default_instance() {
    return reinterpret_cast<const NoMoneyRequest*>(
               &_NoMoneyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NoMoneyRequest& a, NoMoneyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NoMoneyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoMoneyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoMoneyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoMoneyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoMoneyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoMoneyRequest& from) {
    NoMoneyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoMoneyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NoMoneyRequest";
  }
  protected:
  explicit NoMoneyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kStationIdFieldNumber = 3,
    kOilIdFieldNumber = 4,
    kMoneyFieldNumber = 5,
  };
  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // int64 station_id = 3;
  void clear_station_id();
  int64_t station_id() const;
  void set_station_id(int64_t value);
  private:
  int64_t _internal_station_id() const;
  void _internal_set_station_id(int64_t value);
  public:

  // int64 oil_id = 4;
  void clear_oil_id();
  int64_t oil_id() const;
  void set_oil_id(int64_t value);
  private:
  int64_t _internal_oil_id() const;
  void _internal_set_oil_id(int64_t value);
  public:

  // int64 money = 5;
  void clear_money();
  int64_t money() const;
  void set_money(int64_t value);
  private:
  int64_t _internal_money() const;
  void _internal_set_money(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:NoMoneyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    int64_t station_id_;
    int64_t oil_id_;
    int64_t money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_station_2eproto;
};
// -------------------------------------------------------------------

class GetOilRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetOilRequest) */ {
 public:
  inline GetOilRequest() : GetOilRequest(nullptr) {}
  ~GetOilRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOilRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOilRequest(const GetOilRequest& from);
  GetOilRequest(GetOilRequest&& from) noexcept
    : GetOilRequest() {
    *this = ::std::move(from);
  }

  inline GetOilRequest& operator=(const GetOilRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOilRequest& operator=(GetOilRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOilRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOilRequest* internal_default_instance() {
    return reinterpret_cast<const GetOilRequest*>(
               &_GetOilRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetOilRequest& a, GetOilRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOilRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOilRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOilRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOilRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOilRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOilRequest& from) {
    GetOilRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOilRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetOilRequest";
  }
  protected:
  explicit GetOilRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kMsgFieldNumber = 2,
    kReceiverIdFieldNumber = 3,
    kStationIdFieldNumber = 4,
  };
  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string receiver_id = 3;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // int64 station_id = 4;
  void clear_station_id();
  int64_t station_id() const;
  void set_station_id(int64_t value);
  private:
  int64_t _internal_station_id() const;
  void _internal_set_station_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetOilRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    int64_t station_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_station_2eproto;
};
// -------------------------------------------------------------------

class InitRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InitRequest) */ {
 public:
  inline InitRequest() : InitRequest(nullptr) {}
  ~InitRequest() override;
  explicit PROTOBUF_CONSTEXPR InitRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitRequest(const InitRequest& from);
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitRequest& from) {
    InitRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitRequest";
  }
  protected:
  explicit InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
  };
  // int32 port = 1;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:InitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_station_2eproto;
};
// -------------------------------------------------------------------

class LinkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LinkRequest) */ {
 public:
  inline LinkRequest() : LinkRequest(nullptr) {}
  ~LinkRequest() override;
  explicit PROTOBUF_CONSTEXPR LinkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LinkRequest(const LinkRequest& from);
  LinkRequest(LinkRequest&& from) noexcept
    : LinkRequest() {
    *this = ::std::move(from);
  }

  inline LinkRequest& operator=(const LinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkRequest& operator=(LinkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinkRequest* internal_default_instance() {
    return reinterpret_cast<const LinkRequest*>(
               &_LinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LinkRequest& a, LinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LinkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LinkRequest& from) {
    LinkRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LinkRequest";
  }
  protected:
  explicit LinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kCostFieldNumber = 2,
  };
  // int32 port = 1;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 cost = 2;
  void clear_cost();
  int32_t cost() const;
  void set_cost(int32_t value);
  private:
  int32_t _internal_cost() const;
  void _internal_set_cost(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:LinkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t port_;
    int32_t cost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_station_2eproto;
};
// -------------------------------------------------------------------

class SendOilRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SendOilRequest) */ {
 public:
  inline SendOilRequest() : SendOilRequest(nullptr) {}
  ~SendOilRequest() override;
  explicit PROTOBUF_CONSTEXPR SendOilRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendOilRequest(const SendOilRequest& from);
  SendOilRequest(SendOilRequest&& from) noexcept
    : SendOilRequest() {
    *this = ::std::move(from);
  }

  inline SendOilRequest& operator=(const SendOilRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOilRequest& operator=(SendOilRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendOilRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendOilRequest* internal_default_instance() {
    return reinterpret_cast<const SendOilRequest*>(
               &_SendOilRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendOilRequest& a, SendOilRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOilRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOilRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendOilRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendOilRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendOilRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendOilRequest& from) {
    SendOilRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOilRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SendOilRequest";
  }
  protected:
  explicit SendOilRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 5,
    kUidFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
    kMsgFieldNumber = 3,
    kMoneyFieldNumber = 4,
  };
  // repeated int32 route = 5;
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  private:
  int32_t _internal_route(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_route() const;
  void _internal_add_route(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_route();
  public:
  int32_t route(int index) const;
  void set_route(int index, int32_t value);
  void add_route(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_route();

  // string uid = 1;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string receiver_id = 2;
  void clear_receiver_id();
  const std::string& receiver_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_id();
  PROTOBUF_NODISCARD std::string* release_receiver_id();
  void set_allocated_receiver_id(std::string* receiver_id);
  private:
  const std::string& _internal_receiver_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_id(const std::string& value);
  std::string* _internal_mutable_receiver_id();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 money = 4;
  void clear_money();
  int64_t money() const;
  void set_money(int64_t value);
  private:
  int64_t _internal_money() const;
  void _internal_set_money(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:SendOilRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > route_;
    mutable std::atomic<int> _route_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int64_t money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_station_2eproto;
};
// -------------------------------------------------------------------

class AddMoneyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddMoneyRequest) */ {
 public:
  inline AddMoneyRequest() : AddMoneyRequest(nullptr) {}
  ~AddMoneyRequest() override;
  explicit PROTOBUF_CONSTEXPR AddMoneyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddMoneyRequest(const AddMoneyRequest& from);
  AddMoneyRequest(AddMoneyRequest&& from) noexcept
    : AddMoneyRequest() {
    *this = ::std::move(from);
  }

  inline AddMoneyRequest& operator=(const AddMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMoneyRequest& operator=(AddMoneyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddMoneyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddMoneyRequest* internal_default_instance() {
    return reinterpret_cast<const AddMoneyRequest*>(
               &_AddMoneyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddMoneyRequest& a, AddMoneyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddMoneyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddMoneyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddMoneyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddMoneyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddMoneyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddMoneyRequest& from) {
    AddMoneyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMoneyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddMoneyRequest";
  }
  protected:
  explicit AddMoneyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kOilIdFieldNumber = 3,
  };
  // int32 amount = 2;
  void clear_amount();
  int32_t amount() const;
  void set_amount(int32_t value);
  private:
  int32_t _internal_amount() const;
  void _internal_set_amount(int32_t value);
  public:

  // int32 oil_id = 3;
  void clear_oil_id();
  int32_t oil_id() const;
  void set_oil_id(int32_t value);
  private:
  int32_t _internal_oil_id() const;
  void _internal_set_oil_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AddMoneyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t amount_;
    int32_t oil_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_station_2eproto;
};
// -------------------------------------------------------------------

class None final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:None) */ {
 public:
  inline None() : None(nullptr) {}
  explicit PROTOBUF_CONSTEXPR None(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  None(const None& from);
  None(None&& from) noexcept
    : None() {
    *this = ::std::move(from);
  }

  inline None& operator=(const None& from) {
    CopyFrom(from);
    return *this;
  }
  inline None& operator=(None&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const None& default_instance() {
    return *internal_default_instance();
  }
  static inline const None* internal_default_instance() {
    return reinterpret_cast<const None*>(
               &_None_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(None& a, None& b) {
    a.Swap(&b);
  }
  inline void Swap(None* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(None* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  None* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<None>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const None& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const None& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "None";
  }
  protected:
  explicit None(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:None)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_station_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PassedRequest

// string uid = 1;
inline void PassedRequest::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& PassedRequest::uid() const {
  // @@protoc_insertion_point(field_get:PassedRequest.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PassedRequest::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PassedRequest.uid)
}
inline std::string* PassedRequest::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:PassedRequest.uid)
  return _s;
}
inline const std::string& PassedRequest::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void PassedRequest::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* PassedRequest::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* PassedRequest::release_uid() {
  // @@protoc_insertion_point(field_release:PassedRequest.uid)
  return _impl_.uid_.Release();
}
inline void PassedRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PassedRequest.uid)
}

// string receiver_id = 2;
inline void PassedRequest::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& PassedRequest::receiver_id() const {
  // @@protoc_insertion_point(field_get:PassedRequest.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PassedRequest::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PassedRequest.receiver_id)
}
inline std::string* PassedRequest::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:PassedRequest.receiver_id)
  return _s;
}
inline const std::string& PassedRequest::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void PassedRequest::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PassedRequest::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PassedRequest::release_receiver_id() {
  // @@protoc_insertion_point(field_release:PassedRequest.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void PassedRequest::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PassedRequest.receiver_id)
}

// int64 station_id = 3;
inline void PassedRequest::clear_station_id() {
  _impl_.station_id_ = int64_t{0};
}
inline int64_t PassedRequest::_internal_station_id() const {
  return _impl_.station_id_;
}
inline int64_t PassedRequest::station_id() const {
  // @@protoc_insertion_point(field_get:PassedRequest.station_id)
  return _internal_station_id();
}
inline void PassedRequest::_internal_set_station_id(int64_t value) {
  
  _impl_.station_id_ = value;
}
inline void PassedRequest::set_station_id(int64_t value) {
  _internal_set_station_id(value);
  // @@protoc_insertion_point(field_set:PassedRequest.station_id)
}

// int64 money = 4;
inline void PassedRequest::clear_money() {
  _impl_.money_ = int64_t{0};
}
inline int64_t PassedRequest::_internal_money() const {
  return _impl_.money_;
}
inline int64_t PassedRequest::money() const {
  // @@protoc_insertion_point(field_get:PassedRequest.money)
  return _internal_money();
}
inline void PassedRequest::_internal_set_money(int64_t value) {
  
  _impl_.money_ = value;
}
inline void PassedRequest::set_money(int64_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:PassedRequest.money)
}

// -------------------------------------------------------------------

// NoMoneyRequest

// string uid = 1;
inline void NoMoneyRequest::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& NoMoneyRequest::uid() const {
  // @@protoc_insertion_point(field_get:NoMoneyRequest.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoMoneyRequest::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NoMoneyRequest.uid)
}
inline std::string* NoMoneyRequest::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:NoMoneyRequest.uid)
  return _s;
}
inline const std::string& NoMoneyRequest::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void NoMoneyRequest::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* NoMoneyRequest::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* NoMoneyRequest::release_uid() {
  // @@protoc_insertion_point(field_release:NoMoneyRequest.uid)
  return _impl_.uid_.Release();
}
inline void NoMoneyRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NoMoneyRequest.uid)
}

// string receiver_id = 2;
inline void NoMoneyRequest::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& NoMoneyRequest::receiver_id() const {
  // @@protoc_insertion_point(field_get:NoMoneyRequest.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NoMoneyRequest::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:NoMoneyRequest.receiver_id)
}
inline std::string* NoMoneyRequest::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:NoMoneyRequest.receiver_id)
  return _s;
}
inline const std::string& NoMoneyRequest::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void NoMoneyRequest::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* NoMoneyRequest::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* NoMoneyRequest::release_receiver_id() {
  // @@protoc_insertion_point(field_release:NoMoneyRequest.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void NoMoneyRequest::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:NoMoneyRequest.receiver_id)
}

// int64 station_id = 3;
inline void NoMoneyRequest::clear_station_id() {
  _impl_.station_id_ = int64_t{0};
}
inline int64_t NoMoneyRequest::_internal_station_id() const {
  return _impl_.station_id_;
}
inline int64_t NoMoneyRequest::station_id() const {
  // @@protoc_insertion_point(field_get:NoMoneyRequest.station_id)
  return _internal_station_id();
}
inline void NoMoneyRequest::_internal_set_station_id(int64_t value) {
  
  _impl_.station_id_ = value;
}
inline void NoMoneyRequest::set_station_id(int64_t value) {
  _internal_set_station_id(value);
  // @@protoc_insertion_point(field_set:NoMoneyRequest.station_id)
}

// int64 oil_id = 4;
inline void NoMoneyRequest::clear_oil_id() {
  _impl_.oil_id_ = int64_t{0};
}
inline int64_t NoMoneyRequest::_internal_oil_id() const {
  return _impl_.oil_id_;
}
inline int64_t NoMoneyRequest::oil_id() const {
  // @@protoc_insertion_point(field_get:NoMoneyRequest.oil_id)
  return _internal_oil_id();
}
inline void NoMoneyRequest::_internal_set_oil_id(int64_t value) {
  
  _impl_.oil_id_ = value;
}
inline void NoMoneyRequest::set_oil_id(int64_t value) {
  _internal_set_oil_id(value);
  // @@protoc_insertion_point(field_set:NoMoneyRequest.oil_id)
}

// int64 money = 5;
inline void NoMoneyRequest::clear_money() {
  _impl_.money_ = int64_t{0};
}
inline int64_t NoMoneyRequest::_internal_money() const {
  return _impl_.money_;
}
inline int64_t NoMoneyRequest::money() const {
  // @@protoc_insertion_point(field_get:NoMoneyRequest.money)
  return _internal_money();
}
inline void NoMoneyRequest::_internal_set_money(int64_t value) {
  
  _impl_.money_ = value;
}
inline void NoMoneyRequest::set_money(int64_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:NoMoneyRequest.money)
}

// -------------------------------------------------------------------

// GetOilRequest

// string uid = 1;
inline void GetOilRequest::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& GetOilRequest::uid() const {
  // @@protoc_insertion_point(field_get:GetOilRequest.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOilRequest::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetOilRequest.uid)
}
inline std::string* GetOilRequest::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:GetOilRequest.uid)
  return _s;
}
inline const std::string& GetOilRequest::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void GetOilRequest::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOilRequest::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOilRequest::release_uid() {
  // @@protoc_insertion_point(field_release:GetOilRequest.uid)
  return _impl_.uid_.Release();
}
inline void GetOilRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetOilRequest.uid)
}

// string msg = 2;
inline void GetOilRequest::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& GetOilRequest::msg() const {
  // @@protoc_insertion_point(field_get:GetOilRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOilRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetOilRequest.msg)
}
inline std::string* GetOilRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:GetOilRequest.msg)
  return _s;
}
inline const std::string& GetOilRequest::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void GetOilRequest::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOilRequest::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOilRequest::release_msg() {
  // @@protoc_insertion_point(field_release:GetOilRequest.msg)
  return _impl_.msg_.Release();
}
inline void GetOilRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetOilRequest.msg)
}

// string receiver_id = 3;
inline void GetOilRequest::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& GetOilRequest::receiver_id() const {
  // @@protoc_insertion_point(field_get:GetOilRequest.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOilRequest::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetOilRequest.receiver_id)
}
inline std::string* GetOilRequest::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:GetOilRequest.receiver_id)
  return _s;
}
inline const std::string& GetOilRequest::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void GetOilRequest::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOilRequest::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOilRequest::release_receiver_id() {
  // @@protoc_insertion_point(field_release:GetOilRequest.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void GetOilRequest::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetOilRequest.receiver_id)
}

// int64 station_id = 4;
inline void GetOilRequest::clear_station_id() {
  _impl_.station_id_ = int64_t{0};
}
inline int64_t GetOilRequest::_internal_station_id() const {
  return _impl_.station_id_;
}
inline int64_t GetOilRequest::station_id() const {
  // @@protoc_insertion_point(field_get:GetOilRequest.station_id)
  return _internal_station_id();
}
inline void GetOilRequest::_internal_set_station_id(int64_t value) {
  
  _impl_.station_id_ = value;
}
inline void GetOilRequest::set_station_id(int64_t value) {
  _internal_set_station_id(value);
  // @@protoc_insertion_point(field_set:GetOilRequest.station_id)
}

// -------------------------------------------------------------------

// InitRequest

// int32 port = 1;
inline void InitRequest::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t InitRequest::_internal_port() const {
  return _impl_.port_;
}
inline int32_t InitRequest::port() const {
  // @@protoc_insertion_point(field_get:InitRequest.port)
  return _internal_port();
}
inline void InitRequest::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void InitRequest::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:InitRequest.port)
}

// -------------------------------------------------------------------

// LinkRequest

// int32 port = 1;
inline void LinkRequest::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t LinkRequest::_internal_port() const {
  return _impl_.port_;
}
inline int32_t LinkRequest::port() const {
  // @@protoc_insertion_point(field_get:LinkRequest.port)
  return _internal_port();
}
inline void LinkRequest::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void LinkRequest::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:LinkRequest.port)
}

// int32 cost = 2;
inline void LinkRequest::clear_cost() {
  _impl_.cost_ = 0;
}
inline int32_t LinkRequest::_internal_cost() const {
  return _impl_.cost_;
}
inline int32_t LinkRequest::cost() const {
  // @@protoc_insertion_point(field_get:LinkRequest.cost)
  return _internal_cost();
}
inline void LinkRequest::_internal_set_cost(int32_t value) {
  
  _impl_.cost_ = value;
}
inline void LinkRequest::set_cost(int32_t value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:LinkRequest.cost)
}

// -------------------------------------------------------------------

// SendOilRequest

// string uid = 1;
inline void SendOilRequest::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& SendOilRequest::uid() const {
  // @@protoc_insertion_point(field_get:SendOilRequest.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendOilRequest::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SendOilRequest.uid)
}
inline std::string* SendOilRequest::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:SendOilRequest.uid)
  return _s;
}
inline const std::string& SendOilRequest::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void SendOilRequest::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* SendOilRequest::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* SendOilRequest::release_uid() {
  // @@protoc_insertion_point(field_release:SendOilRequest.uid)
  return _impl_.uid_.Release();
}
inline void SendOilRequest::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SendOilRequest.uid)
}

// string receiver_id = 2;
inline void SendOilRequest::clear_receiver_id() {
  _impl_.receiver_id_.ClearToEmpty();
}
inline const std::string& SendOilRequest::receiver_id() const {
  // @@protoc_insertion_point(field_get:SendOilRequest.receiver_id)
  return _internal_receiver_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendOilRequest::set_receiver_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SendOilRequest.receiver_id)
}
inline std::string* SendOilRequest::mutable_receiver_id() {
  std::string* _s = _internal_mutable_receiver_id();
  // @@protoc_insertion_point(field_mutable:SendOilRequest.receiver_id)
  return _s;
}
inline const std::string& SendOilRequest::_internal_receiver_id() const {
  return _impl_.receiver_id_.Get();
}
inline void SendOilRequest::_internal_set_receiver_id(const std::string& value) {
  
  _impl_.receiver_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SendOilRequest::_internal_mutable_receiver_id() {
  
  return _impl_.receiver_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SendOilRequest::release_receiver_id() {
  // @@protoc_insertion_point(field_release:SendOilRequest.receiver_id)
  return _impl_.receiver_id_.Release();
}
inline void SendOilRequest::set_allocated_receiver_id(std::string* receiver_id) {
  if (receiver_id != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_id_.SetAllocated(receiver_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_id_.IsDefault()) {
    _impl_.receiver_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SendOilRequest.receiver_id)
}

// string msg = 3;
inline void SendOilRequest::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& SendOilRequest::msg() const {
  // @@protoc_insertion_point(field_get:SendOilRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendOilRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SendOilRequest.msg)
}
inline std::string* SendOilRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:SendOilRequest.msg)
  return _s;
}
inline const std::string& SendOilRequest::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void SendOilRequest::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* SendOilRequest::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* SendOilRequest::release_msg() {
  // @@protoc_insertion_point(field_release:SendOilRequest.msg)
  return _impl_.msg_.Release();
}
inline void SendOilRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SendOilRequest.msg)
}

// int64 money = 4;
inline void SendOilRequest::clear_money() {
  _impl_.money_ = int64_t{0};
}
inline int64_t SendOilRequest::_internal_money() const {
  return _impl_.money_;
}
inline int64_t SendOilRequest::money() const {
  // @@protoc_insertion_point(field_get:SendOilRequest.money)
  return _internal_money();
}
inline void SendOilRequest::_internal_set_money(int64_t value) {
  
  _impl_.money_ = value;
}
inline void SendOilRequest::set_money(int64_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:SendOilRequest.money)
}

// repeated int32 route = 5;
inline int SendOilRequest::_internal_route_size() const {
  return _impl_.route_.size();
}
inline int SendOilRequest::route_size() const {
  return _internal_route_size();
}
inline void SendOilRequest::clear_route() {
  _impl_.route_.Clear();
}
inline int32_t SendOilRequest::_internal_route(int index) const {
  return _impl_.route_.Get(index);
}
inline int32_t SendOilRequest::route(int index) const {
  // @@protoc_insertion_point(field_get:SendOilRequest.route)
  return _internal_route(index);
}
inline void SendOilRequest::set_route(int index, int32_t value) {
  _impl_.route_.Set(index, value);
  // @@protoc_insertion_point(field_set:SendOilRequest.route)
}
inline void SendOilRequest::_internal_add_route(int32_t value) {
  _impl_.route_.Add(value);
}
inline void SendOilRequest::add_route(int32_t value) {
  _internal_add_route(value);
  // @@protoc_insertion_point(field_add:SendOilRequest.route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SendOilRequest::_internal_route() const {
  return _impl_.route_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SendOilRequest::route() const {
  // @@protoc_insertion_point(field_list:SendOilRequest.route)
  return _internal_route();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SendOilRequest::_internal_mutable_route() {
  return &_impl_.route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SendOilRequest::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:SendOilRequest.route)
  return _internal_mutable_route();
}

// -------------------------------------------------------------------

// AddMoneyRequest

// int32 amount = 2;
inline void AddMoneyRequest::clear_amount() {
  _impl_.amount_ = 0;
}
inline int32_t AddMoneyRequest::_internal_amount() const {
  return _impl_.amount_;
}
inline int32_t AddMoneyRequest::amount() const {
  // @@protoc_insertion_point(field_get:AddMoneyRequest.amount)
  return _internal_amount();
}
inline void AddMoneyRequest::_internal_set_amount(int32_t value) {
  
  _impl_.amount_ = value;
}
inline void AddMoneyRequest::set_amount(int32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:AddMoneyRequest.amount)
}

// int32 oil_id = 3;
inline void AddMoneyRequest::clear_oil_id() {
  _impl_.oil_id_ = 0;
}
inline int32_t AddMoneyRequest::_internal_oil_id() const {
  return _impl_.oil_id_;
}
inline int32_t AddMoneyRequest::oil_id() const {
  // @@protoc_insertion_point(field_get:AddMoneyRequest.oil_id)
  return _internal_oil_id();
}
inline void AddMoneyRequest::_internal_set_oil_id(int32_t value) {
  
  _impl_.oil_id_ = value;
}
inline void AddMoneyRequest::set_oil_id(int32_t value) {
  _internal_set_oil_id(value);
  // @@protoc_insertion_point(field_set:AddMoneyRequest.oil_id)
}

// -------------------------------------------------------------------

// None

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Status>() {
  return ::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_station_2eproto
